#include <iostream>
using namespace std;

//climb stairs
int solve(int N)
{
    vector<int>dp(N,0);
    dp[0] = 1;
    dp[1] = 1;
    for(int i = 2 ; i < N ; i++)
    {
        dp[i] = dp[i-1] + dp[i-2];
    }
    return dp[N-1];
}
//house robber
int rob(vector<int> &nums)
{
    int n = nums.size();
    if(n == 1)
        return nums[0];

    vector<int>dp(n,0);
    
    dp[n-1] = nums[n-1];
    dp[n-2] = max(nums[n-1],nums[n-2]);
    
    for(int i = n-3 ; i>= 0 ; i--)
    {
        dp[i] = max(dp[i+1],nums[i]+dp[i+2]);
    }
    return dp[0];
    
}

//house robber 2

//delete and earn(same as house robber)
int solve(vector<int>nums)
{
    int n = 1e4+1;
    vector<int>val(n,0);
    
    for(int i = 0 ; i < nums.size() ; i++)
    {
        val[nums[i]] += nums[i];
    }
    
    vector<int>dp(n,0);
    dp[1] = nums[0];
    dp[2] = max(nums[0] ,nums[1]);
    
    for(int i = 3 ; i < n ; i++)
    {
        dp[i] = max(val[i] + dp[i-2], dp[i]);
    }
    return max(d[10000],dp[9999]);
}
//painiting fence problem
int solve(int n , int k)
{
    int diff = k;//signifining no. of ways to color 1 fense
    int same = 0;//no. of ways to color last two fanse with same color. Not possible if we have only one fense
    int total = same + diff ;//total no. of ways to color 1 fense
    
    for(int i = 2 ; i<= n ; i++)
    {
        same = diff * (1);
        diff = total * (k-1);
        total = same + diff;    
    }
    return total;
    
}

//house robbery 3 

class housepair
{
  public:
    int withRobbery
    int withoutRobbery;
    
    housepair()
    {
        withoutRobbery = 0;
        withRobbery = 0;
    }
};

housepair solve(TreeNode* root)
{
    if(root == NULL)
    {
        housepair p = new housepair();
        return p;
    }
    
    housepair left = solve(root->left);
    housepair right = solve(root->right);
    
    housepair myans = new housepair();
    myans.withRobbery = root->val + left.withoutRobbery + right.withoutRobbery;
    myans.withoutRobbery = max(left.withoutRobbery,left.withRobbery) + max(right.withoutRobbery,right.withRobbery);
    return myans;
}

int rob(TreeNode *root)
{
    housepair ans = solve(root);
    return max(ans.withRobbery,ans.withoutRobbery);
}

//max product subarray

int solve(vector<int> &arr)
{
    int overall_max = 0;
    int max_ending = 1;
    int min_ending = 1;
    
    int flag = 0;
    
    for(int i = 0 ; i < n ; i++)
    {
        if(arr[i] > 0)
        {
            max_ending *=arr[i];
            min_ending = min(min_ending * arr[i],1);
            flag = 1;
        }
        
        else if(arr[i] == 0)
        {
            max_ending = 1;
            min_ending = 1;
        }
        
        else{
            int temp = max_ending;
            max_ending = max(min_ending*arr[i],1);
            min_ending = temp * arr[i];
        }
        
        if(overall_max < max_ending)
            overall_max = max_ending;
    }
    
    if(flag == 0 && overall_max == 0)
        return 0;
    return overall_max;
}

//longest incresing subsequence

int LIS(vector<int>arr)
{
    int n = arr.size();
    vector<int>dp(n,1);
    
    for(int i = 1 ; i < n ; i++)
    {
        for(int j = 0 ; j <= i ; j++)
        {
            if(arr[i] > arr[j])
                dp[i] = max(dp[j]+1,dp[i]);
        }
    }
    return dp[n-1];
}

//LIS in nlogn time complexity(IMP)
 int lengthOfLIS(vector<int>& nums) {
        vector<int> sub;
        for (int x : nums) {
            if (sub.empty() || sub[sub.size() - 1] < x) {
                sub.push_back(x);
            } else {
                auto it = lower_bound(sub.begin(), sub.end(), x); // Find the index of the smallest number >= x
                *it = x; // Replace that number with x
            }
        }
        return sub.size();
    }

//longest common subsequence
int solve(string a , string b , int i , int j , vector<vector<int>>&dp)
{
    if(i ==0 || j ==0 )
    {
        return 0;
    }
    
    if(dp[i][j] != -1)
        return dp[i][j];
        
    if(a[i-1] == b[j-1])
        return dp[i][j] =1 +solve(a,b,i-1,j-1);
    else
        return dp[i][j] = max(solve(a,b,i,j-1) , solve(a,b,i-1,j));
}
int LCS(string a , string b)
{
    int n = a.size();
    int m = b.size();
    
    vector<vector<int>> dp(n+1 , vector<int>(m+1,-1));
    
    return solve(a,b,n,m,dp);
    
}
//lcs iteratively

int lcs (string a , string b)
{
    int n = a.size();
    int m = b.size();
    vector<vector<int>>dp(n+1,vector<int>)
    for(int i = 1 ; i <= n ; i++)
    {
        for(int j = 1 ; j <= m ;j++)
        {
            if(a[i-1] == b[j-1])
                dp[i][j] = dp[i-1][j-1] + 1;
            else
                dp[i][j] = max(dp[i-1][j],dp[i][j-1]);
        }
    }
    return dp[n][m];
}

// 0-1 kanpsack

int kanpsack(vector<int> val , vector<int> wt , int capacity)
{
    int n = val.size()
    vector<vector<int>>dp(n+1,vector<int>(capacity+1 , 0))
    
    for(int i = 1 ; i <= n ; i++)
    {
        for(int j = 1 ; j <= m ; j++)
        {
            if(wt[i-1] <= j)
            {
                dp[i][j] = max(dp[i-1][j] , val[i-1]+dp[i-1][j - wt[i]])
            }
            else
                dp[i][j] = dp[i-1][j];
        }
    }
    return dp[n][m];
}

//edit distance

int solve(string a , string b)
{
    int n = a.size();
    int m = b.size();
    
    vector<vector<int>> dp(n,vector<int>(m,0));
    
    for(int i = 0 ; i <= n ; i++)
    {
        for(int j = 0 ; j <= m ; j++)
        {
            if(i == 0 && j == 0)
                dp[i][j] = 0;
            else if(i == 0)
                dp[i][j] = i;
            else if(j == 0)
                dp[i][j] = j;
            
            else if(a[i-1] == b[j-1])
                dp[i][j] = dp[i-1][j-1];
                
            else
            {
                dp[i][j] = 1+min(dp[i-1][j] , d[i][j-1] , dp[i-1][j-1]);
                
                
            }
        }
        return dp[n][m];
    }
}

//Maximum Sum Increasing Subsequence

int solve(vector<int> &arr)
{
    int n = arr.size();
    vector<int>dp(n,0);
    dp[0] = arr[0];
    for(int  i = 1 ; i < n ; i++)
    {
        for(int j = 0 ; j < i ; j++)
        {
            dp[i] = arr[i];
            if(arr[j] < arr[i])
            {
                dp[i] = max(dp[i] , dp[j] + arr[i]);
            }
        }
    }
    return dp[n-1];
}

//Maximum path sum in matrix
int findMaxPath(vector<int> &mat)
{
    int n = mat.size();
    int m = mat[0].size();
    
    for(int i = 1 ; i < n ; i++)
    {
        for(int j = 0 ; j < m ;j++)
        {
            if( j > 0 && j < m-1)
            {
                mat[i][j] += max(mat[i-1][j],max(mat[i-1][j-1] , mat[i-1][j+1]));
            }
            else if( j == 0)
            {
                mat[i][j] += max(mat[i-1][j],mat[i-1][j+1]);
            }
            else if( j == m-1)
            {
                mat[i][j] += max(mat[i-1][j],mat[i-1][j+1]);
            }
        }
        
    }
    int res = 0;
    for (int j = 0; j < M; j++)
        res = max(mat[N-1][j], res);
    return res;
}

//coin change
int solve(vector<int> &coin , int N)
{
    int n = coin.size();
    vector<vector<int>>dp(n+1,vector<int>(N+1,0));
    
    for(int i = 1 ; i <= n ; i++)
    {
        for(int j = 1 ; j <=N ; j++)
        {
            if(coin[i] <= j)
            {
                dp[i][j] = max(dp[i][j] ,dp[i][j-coin[i]] + dp[i-1][j]) ;
            }
        }
    }
    return dp[n][N];
}
//Subset Sum Problem

int solve(vector<int> set,int sum)
{
    int n = set.size();
    
    vector<vector<bool>> dp(n+1,vector<bool>(sum+1,false));
    
    for(int i = 0 ; i < n ; i++)
    {
        dp[i][0] = true;
    }
    
    for(int i = 1 ; i <= n ; i++)
    {
        for(int j =1 ; j<= sum ;j++)
        {
            dp[i][j] = dp[i-1][j];
            if(set[i-1] <= j)
            {
                dp[i][j] = dp[i-1][j-set[i-1]] || dp[i-1][j];
            }
        }
    }
    return dp[n][sum];
}

//matrix chain multiplication
 int solve(int arr[] , int i , int j , vector<vector<int>> &dp)
    {
        if(i == j)
            return dp[i][j] = 0;
        
        if(dp[i][j] != -1)
            return dp[i][j];
            
        int ans = INT_MAX;
        for(int k = i ; k < j ; k++)
        {
            int temp = solve(arr,i,k,dp) + solve(arr,k+1,j,dp) + (arr[i-1]*arr[k]*arr[j]);
            ans = min(ans,temp);
        }
        dp[i][j] = ans;
        return dp[i][j];
    }
    int matrixMultiplication(int N, int arr[])
    {
        // code here
        int i = 1 , j = N-1;
        
        vector<vector<int>>dp(N,vector<int>(N,-1));
        
        return solve(arr,i,j,dp);
        
    }
    
// rod cutiing
int solve(vector<int>l , vector<int>p , int N , int i)
{
    if(i == l.size())
        return dp[i][j] = 0;
    
    if(dp[i][j] != -1)
        return dp[i][j];
    
    dp[i][j] = max(p[i] + solve(l,p , N-l[i] , i) ,solve(l,p , N , i+1));
    return dp[i][j];
}

//total number of cut segment

int solve(int n ,int x , int y , int z)
{
    vector<int>dp(n+1,-1);
    dp[0] = 0;
    for(int i = 0 ; i <= n ; i++)
    {
        if(dp[i] == -1)
            continue;
            
        if(i + p <= l)
            dp[i+p] = max(dp[i+p],dp[i]+1);
        
        if(i + q <= l)
            dp[i+q] = max(dp[i+q],dp[i]+1);
        
        if(i + r <= l)
            dp[i+r] = max(dp[i+r],dp[i]+1);
    }
    
    return dp[l] == -1?0:dp[l];
}

//mcm egg dropping Problem
vector<vector<int>> dp(MAX , vector<int>(MAX,-1));
int solve(int egg , int floors)
{
    if( egg == 1|| floors == 0 || floors == 1)
        return dp[egg][floors] = floors;
    
    if(dp[egg][floors] != -1)
        return dp[egg][floors];
    int mn = INT_MAX;
    
    for(int k = 1 ; k <= floors ; k++)
    {
        int temp =min(solve(egg-1,floors-1),solve(egg,floors-k));
        mn = min(mn,temp);
    }
    dp[egg][floors] = mn;
    return mn;
        
}

//word break

 bool wordBreak(string s, vector<string>& wordDict)
 {
        
        int n = s.size();
        vector<int>dp(n+1,0);
        dp[n] = 1;
        
        unordered_set<string>dict;
        for(auto word : wordDict)
        {
            dict.insert(word);
        }
        string temp ="";
        for(int i = n-1 ; i >= 0 ; i--)
        {
             temp = "";
            for(int j = i ; j < n ;j++)
            {
                temp += s[j];
                if(dict.find(temp) != dict.end())
                {
                    dp[i] = dp[i] || dp[j+1];
                }
                if(dp[i])
                    break;
            }
            
        }
        return dp[0];
    }
    
// Burst Baloon mcm problem
    int B(int i , int j ,vector<int> &nums, vector<vector<int>> &dp)
    {
        //base case
        
        if(i == j - 1)
            return 0;
        if(dp[i][j]!=-1)
            return dp[i][j];
        
        int res = INT_MIN;
        for(int k = i+1 ; k <= j-1 ; k++)
        {
            res = max(res,nums[k]*nums[j]*nums[i]+B(i,k,nums,dp) + B(k,j,nums,dp));
        }
        return dp[i][j] = res;
    }

    int maxCoins(vector<int>& nums) {
        
        nums.insert(nums.begin(),1);
        nums.push_back(1);
        vector<vector<int>>dp(nums.size(),vector<int>(nums.size(),-1));
        return B(0, nums.size()-1, nums,dp);

    }

//palindron partitioning(recursively)
isPalindrome(string s , int  i , int j)
{
     while(i>=j)
     {
         if(s[i]!=s[j])
            return false;
     }
     return true;
}

void solve(string s,vector<vector<string>> &ans, vector<string> &contri,int index)

{
    is(i == s.size())
    {
        res.push_back(contri);
        return;
    }
    
    for(int i = index ; i < s.size() ; i++)
    {
        if(isPalindrome(index,s,i))
        {
            contri.push_back(s.substr(i,i-index+1));
            solve(s,ans,contri,i+1);
            contri.pop_back();
        }
    }
}
vector<vector<string>> partition(string s)
{
    vector<vector<string>> ans;
    vector<string> contri;
    
    int index = 0;
    
    solve(s,contri,ans,index);
    return ans;
}

//ugly number

int solve(int n)
{
    priority_queue<int,vector<int>,greater<int>> pq;
    
    unordered_set<int> s;
    
    pq.push(1);
    
    while(n--)
    {
        int x =pq.top()
        pq.pop();
        
        if(set.find(x*2) ==set.end())
        {
            pq.push(x*2);
            
        }
        if(set.find(x*3) ==set.end())
        {
            pq.push(x*3);
            
        }
        if(set.find(x*5) ==set.end())
        {
            pq.push(x*5);
            
        }
    }
    return pq.top();
}


//box stacking 
static bool comp(vector<int> A , vector<int> B)
{
    return A[0] * A[1] * A[2] > B[1] * B[2] * B[3];
}
int maxHeight(vector<vector<int>>& cuboids)
{
    // since all three dimension should be strictly Increasing
    //sort individual cuoids on basis of internal dimension
    //prioritising keeping height Maximum
    //therfore internal sorting will be in ascending order 
    
    int n = cuboids.size();
    for(auto dimension : cuboids)
    {
        sort(dimension.begin() , dimension.end());
    }
    
    sort(cuboids.begin() , cuboids.end(),comp);
    
    // using LIS concept to get the max height
    vector<int> dp(n,0);
    dp[0] = cuboids[0][2];
    int res = dp[0];
    for(int i = 1 ; i < n ; i++)
    {
        dp[i] = cuboids[i][2];
        for(int j = 0 ; j < i ; j++)
        {
            if(cuboids[i][0] <= cuboids[j][0] &&cuboids[i][1] <= cuboids[j][1] && cuboids[i][2] <= cuboids[j][2] )
            {
                dp[i] = max(dp[i] , dp[j] + cuboids[i][2]);
            }
        }
        res = max(res,dp[i]);
    }
    return res;
}

//min no. of cut to make string palindrome(MCM)

isPalindrome(string str , int i , int j)
{
    while(i < j)
    {
        if(str[i] != str[j])
            return false;
        i++;
        j--;
    }
    return true;
}

int solve(string s , int i , int j)
{
    //if i> j refers to an empty string so no. of partition we have to make is zero
    //if i == j means 1 letter which iss palindrome in itself therfore 0 partition
    if(i >= j)
        return dp[i][j] = 0;
    
    // if the passed string is intelf a palindrome return 0
    if(isPalindrome(s,i,j))
        return dp[i][j] = 0;
        
    if(dp[i][j] != -1)
    return dp[i][j];
    int res = INT_MAX;
    for(int k = i ; k < j ; k++)
    {
       int temp = 1+ solve(s,i,k) + solve(s,k+1,j);
       ans = min(ans,temp);
    }
    dp[i][j] = ans;
    return dp[i][j];
    
}

////Frog jump 2 
 int jump(vector<int>& nums) 
 {
        if(nums[0] == 0)
            return 0;
            
        int n = nums.size();
        
        if(n == 1)
            return 0;
            
        vector<int>dp(n,0);
        
        for(int i = 0 ; i < n ; i++)
        {
            dp[i] = nums[i] + i;
        }
        int idxright = dp[0];
        int idxnext = -1;
        int res = 1;
        for(int i = 0 ; i < n-1 ; i++)
        {
            idxnext =  max(idxnext , dp[i]);
            
            if(i == idxright)
            {
                res++;
                idxright = idxnext;
            }
        }
        return res;
    }

//Minimum Number of Taps to Open to Water a Garden

 int minTaps(int n, vector<int>& ranges) {
       
        vector<int> dp(n+1,-1);
        int idxleft = -1 , idxright = -1;
        for(int i = 0 ; i <= n ; i++)
        {
            idxleft = max(i - ranges[i],0);
            idxright = min(i + (ranges[i]),n);
            dp[idxleft] = max(dp[idxleft],idxright);
        }
        
        idxright = dp[0];
        int idxnext = -1;
        int count = 1;
        for(int i = 0 ; i < n ; i++)
        {
            if(i > idxright)
                return -1;
            idxnext = max(idxnext,dp[i]);
            
            if(i == idxright)
            {
                count++;
                idxright = idxnext;
            }
        }
        return count;
    }
    
//assymbly line scheduling

int solve(vector<int>x , vector<int> y,vector<int>T1,vector<int>T2)
{
    vector<int>dpx(x.size(),0);
    vector<int>dpy(y.size(),0);
    int n = x.size();
    dpx[0] = x[0];
    dpy[0] = y[0];
    
    for(int i = 1 ; i < n ; i++)
    {
        dpx[i] = x[i] + min(dpx[i] , dpy[i-1] + T2[i]);
        dpy[i] = y[i] + min(dpy[i] , dpx[i-1] + T1[i]);
    }
    return min(dpx[n-1] , dpy[n-1]);
}


//job scheduling
static bool comp(vector<int> a , vector<int> b)
{
    return a[0][1] > b[0][1];
}
int jobScheduling(vector<int> &st , vector<int> &et , vector<int> &profit)
{
    int n = st.size();
    vector<vector<int>> v(n);
    
    for(int i = 0 ; i < n ; i++)
    {
        v[i].push_back({st[i],et[i],profit[i]});
    }
    
    sort(v.bein(),v.end(),comp);
    vector<int>dp(n);
    dp[0] = v[0][2];
    
    for(int i = 1 ; i < n ; i++)
    {
        int inc = v[i][2];
        int last = -1;
        int low = 0;
        int high = i-1;
        while(low <= high)
        {
            int mid = low + (high - low)/2;
            if(v[mid][1] <= v[i][0])
            {
                last = mid;
                low = mid + 1;
            }
            else
            high = mid - 1;
        }
        
        if(last != -1) inc += dp[last];
        int exc = dp[i-1];
        dp[i] = max(inc,exc);
        
    }
    return dp[n-1];
}

//Minimum number of squares whose sum equals to given number n
int GetMinSquares(int n)
{
    if(n <= 3)
        return 3;
        
    vector<int>dp(n+1);
    dp[0] = 0;
    dp[1] = 1;
    dp[2] = 2;
    dp[3] = 3;
    
    for(int i = 4 ; i<= n ; i++)
    {
        dp[i] = i;
        
        for(int x = 1 ; x<= ceil(sqrt(i)) ; i++)
        {
            int t = x * x;
            
            if( t > i)
                break;
            
            else
            {
                dp[i] = min(dp[i],dp[i-temp]);
            }
        }
    }
    return dp[n];
}

//dungeon game

 int calculateMinimumHP(vector<vector<int>>& dungeon) {
        int n = dungeon.size() , m = dungeon[0].size();
        
        vector<vector<int>>dp(n,vector<int>(m,INT_MAX));
        dp[n-1][m-1] = max(1-dungeon[n-1][m-1] , 1);
        for(int i = n-1 ; i >= 0 ; i--)
        {
            for(int j = m-1 ; j >= 0 ; j--)
            {
                if(i+1 < n)
                    dp[i][j] = min(dp[i][j],dp[i+1][j]-dungeon[i][j]);
                
                if(j+1 < m)
                    dp[i][j] = min(dp[i][j],dp[i][j+1]-dungeon[i][j]);
                
                dp[i][j] = max(1,dp[i][j]);
            }
        }
        return dp[0][0];
    }
    
//game theory (Predict the winner)
int solve(vector<int> &nums , int i , int j , unordered_map<string , int> &dp)
    {
        string key = to_string(i) +  to_string(j) + to_string(tur);
        if(i>j)
            return 0;
        if(i == j)
        {
            return nums[i];
        }
        
        if(dp.find(key) != dp.end())
            return dp[key];
        
        dp[key] = max(nums[i] - solve(nums,i+1,j,dp) , nums[j] - solve(nums,i,j-1,dp));
        
        return dp[key];
    }
    
    bool PredictTheWinner(vector<int>& nums) {
        unordered_map<string,int>dp;
        
        int i = 0 ;
        int  j = nums.size() - 1;
        
        int chance = 0;
        
        return solve(nums,i,j,dp,0) >= 0 ? true : false;
        
        
    }

//lcs 3 string
int lcs(string a , string b , string c)
{
    int x = a.size();
    int y = b.sizee();
    int z = c.size();
    
    int dp[x+1][y+1][z+1];
    
    for(int i = 0 ; i <= x ; i++)
    {
        for(int j = 0 ; j <= y ; j++)
        {
            for(int k = 0 ; k <= z ; k++)
            {
                if(i == 0 && j == 0 && k == 0)
                    dp[i][j][k] = 0;
                if(a[i-1] == b[j-1] && b[j-1] == c[k - 1])
                    dp[i][j][k] = 1 + dp[i-1][j-1][k-1];
                else
                {
                    dp[i][j][k] = max(dp[i][j][k-1] , max(dp[i][j-1][k] , dp[i-1][j][k]);
                }
            }
        }
    }
    return dp[x][y][z];
}


//interleafing

using namespace std;
bool areInterwoven(string one, string two, string three, int i, int j,vector<vector<int>> &cache);
// O(nm) time | O(nm) space - where n is the length of the
// first string and m is the length of the second string
bool interweavingStrings(string one, string two, string three) {
  if (three.size() != one.size() + two.size()) {
    return false;
  }
  vector<vector<int>> cache;
  for (int i = 0; i < one.size() + 1; i++) {
    cache.push_back(vector<int>{});
    for (int j = 0; j < two.size() + 1; j++) {
      cache[i].push_back(-1);
    }
  }
  return areInterwoven(one, two, three, 0, 0, cache);
}
bool areInterwoven(string one, string two, string three, int i, int j,
                   vector<vector<int>> &cache) {
  if (cache[i][j] != -1)
    return cache[i][j];
  int k = i + j;
  if (k == three.size())
    return true;
	
  if (i < one.size() && one[i] == three[k]) {
    cache[i][j] = areInterwoven(one, two, three, i + 1, j, cache);
    if (cache[i][j] == true)
      return true;
  }
  if (j < two.size() && two[j] == three[k]) {
    cache[i][j] = areInterwoven(one, two, three, i, j + 1, cache);
    return cache[i][j];
  }
  cache[i][j] = false;
  return false

//interleaving string
int solve(string a , string b , string c , int i , int j , int k , vector<vector<int>> &dp)
{
    //base case
    if(k == c.size())
        return 1;
    // if(i > a.size() || j > b.size())
    //     return false;
    
    if(dp[i][j] != -1)
        return dp[i][j];
    
    if(a[i] == c[k])
    {
        dp[i][j] = solve(a,b,c,i+1,j,k+1,dp);
    }
    else
    {
        dp[i][j] = solve(a,b,c,i,j+1,k+1,dp);
    }
    return dp[i][j];
}
int interleaving(string a , string b , string c)
{
    int n1 , n2 , n3;
    n1 = a.size();
    n2 = b.size();
    n3 = c.size();
    int i , j , k;
    i = j = k = 0;
    
    if(n1 + n2 != n3)
        return false;
    
    vector<vector<int>> dp(n1,vector<int>(n2 , -1));
    return solve(a,b,c,i,j,k,dp);
}

//jump game 3 

bool canReach(vector<int>& arr, int start) {
        queue<int>q;
        int n = arr.size();
        vector<int> vis(n,false);
        
        q.push(start);
        
        while(!q.empty())
        {
            int i = q.front();
            q.pop();
            if(vis[i] == true)
                continue;
            vis[i] = true;
            if(arr[i] == 0)
                return true;
            
            if(i - arr[i] >= 0)
            {
                q.push(i - arr[i]);
            }
            if(i + arr[i] < n)
            {
                q.push(i + arr[i]);
            }
        }
        return false;
    }
    
//scramble string

bool solve(string a , string b ,unordered_map<int> &dp)
{
    if(a.size() == 1)
        return true;
    int n = a.size();
    string key = a + " " + b;
    if(dp.find(key) != dp.end())
        return dp[key];
    
    for(int k = 1 ; k < n ; k++)
    {
        bool unswaped = solve(a.substr(0,k) , b.substr(0,k) , dp) && solve(a.substr(k , n - k) , b.substr(k , n - k) , dp);
        bool swaped = solve(a.substr(0,k) , b.substr(k , n - k) , dp) && solve(a.substr(k , n - k) , b.substr(0 , k) , dp);
        if(swaped | unswaped)
            return dp[key] = true;
    }
    return dp[key] = false;
}
